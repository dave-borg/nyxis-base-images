name: Build Node Base Image

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
    paths:
      - 'dockerfiles/node-base.Dockerfile'
      - 'scripts/**'
      - '.github/workflows/build-node.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'dockerfiles/node-base.Dockerfile'
      - 'scripts/**'
      - '.github/workflows/build-node.yml'
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  PLATFORMS: linux/amd64,linux/arm64
  IMAGE_NAME: node-base

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_push: ${{ steps.push.outputs.should_push }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          chmod +x scripts/version.sh
          VERSION=$(scripts/version.sh version)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Determine push strategy
        id: push
        run: |
          SHOULD_PUSH="false"
          
          if [ "${{ github.event.inputs.push_images }}" = "true" ]; then
            SHOULD_PUSH="true"
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            SHOULD_PUSH="true"
          elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" =~ ^refs/tags/v.* ]]; then
            SHOULD_PUSH="true"
          fi
          
          echo "should_push=${SHOULD_PUSH}" >> $GITHUB_OUTPUT
          echo "Should push: ${SHOULD_PUSH}"

  security-scan:
    runs-on: ubuntu-latest
    needs: prepare
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        run: |
          docker buildx build \
            --file dockerfiles/${{ env.IMAGE_NAME }}.Dockerfile \
            --tag ${{ env.IMAGE_NAME }}:scan \
            --load \
            .

      - name: Run Trivy vulnerability scanner (private report)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: '${{ env.IMAGE_NAME }}:scan'
          format: 'sarif'
          output: 'trivy-private-${{ env.IMAGE_NAME }}.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Upload scan results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-scan-${{ env.IMAGE_NAME }}
          path: trivy-private-${{ env.IMAGE_NAME }}.sarif

  build-and-push:
    runs-on: ubuntu-latest
    needs: [prepare, security-scan]
    if: always() && needs.prepare.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: needs.prepare.outputs.should_push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=edge,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: dockerfiles/${{ env.IMAGE_NAME }}.Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: ${{ needs.prepare.outputs.should_push == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.prepare.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        if: needs.prepare.outputs.should_push == 'true'
        uses: anchore/sbom-action@v0
        continue-on-error: true
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.version }}
          format: spdx-json
          output-file: sbom-${{ env.IMAGE_NAME }}.spdx.json

      - name: Upload SBOM
        if: needs.prepare.outputs.should_push == 'true'
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: sbom-${{ env.IMAGE_NAME }}
          path: sbom-${{ env.IMAGE_NAME }}.spdx.json
          if-no-files-found: ignore

  test-image:
    runs-on: ubuntu-latest
    needs: [prepare, build-and-push]
    if: needs.prepare.outputs.should_push == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test image functionality
        run: |
          set +e  # Don't exit on command failures
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.version }}"
          
          echo "Testing image: $IMAGE_NAME"
          docker pull $IMAGE_NAME || {
            echo "Failed to pull image $IMAGE_NAME"
            exit 1
          }
          
          echo "=== Testing node-base image ==="
          docker run --rm $IMAGE_NAME sh -c 'java -version' && echo "✓ Java test passed" || echo "✗ Java test failed"
          docker run --rm $IMAGE_NAME sh -c 'nmap --version' && echo "✓ Nmap test passed" || echo "✗ Nmap test failed"
          docker run --rm $IMAGE_NAME sh -c 'validate-target 192.168.1.1' && echo "✓ Validate-target test passed" || echo "✗ Validate-target test failed"
          
          echo "=== Test summary for ${{ env.IMAGE_NAME }} completed ==="
          exit 0  # Always exit successfully