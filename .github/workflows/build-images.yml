name: Build and Push Base Images

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: false
        type: boolean
      target_image:
        description: 'Specific image to build (leave empty for all)'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - 'backend-base'
          - 'cli-base'
          - 'node-base'
          - 'devcontainer'

env:
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      images: ${{ steps.images.outputs.images }}
      should_push: ${{ steps.push.outputs.should_push }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          chmod +x scripts/version.sh
          VERSION=$(scripts/version.sh version)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Determine images to build
        id: images
        run: |
          if [ -n "${{ github.event.inputs.target_image }}" ]; then
            IMAGES='["${{ github.event.inputs.target_image }}"]'
          else
            IMAGES='["backend-base", "cli-base", "node-base", "devcontainer"]'
          fi
          echo "images=${IMAGES}" >> $GITHUB_OUTPUT
          echo "Images to build: ${IMAGES}"

      - name: Determine push strategy
        id: push
        run: |
          SHOULD_PUSH="false"
          
          if [ "${{ github.event.inputs.push_images }}" = "true" ]; then
            SHOULD_PUSH="true"
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            SHOULD_PUSH="true"
          elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" =~ ^refs/tags/v.* ]]; then
            SHOULD_PUSH="true"
          fi
          
          echo "should_push=${SHOULD_PUSH}" >> $GITHUB_OUTPUT
          echo "Should push: ${SHOULD_PUSH}"

  security-scan:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        image: ${{ fromJson(needs.prepare.outputs.images) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        run: |
          docker buildx build \
            --file dockerfiles/${{ matrix.image }}.Dockerfile \
            --tag ${{ matrix.image }}:scan \
            --load \
            .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.image }}:scan'
          format: 'sarif'
          output: 'trivy-${{ matrix.image }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.image }}.sarif'

      - name: Run Trivy vulnerability scanner (table format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.image }}:scan'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  build-and-push:
    runs-on: ubuntu-latest
    needs: [prepare, security-scan]
    strategy:
      matrix:
        image: ${{ fromJson(needs.prepare.outputs.images) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: needs.prepare.outputs.should_push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=edge,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: dockerfiles/${{ matrix.image }}.Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: ${{ needs.prepare.outputs.should_push == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.prepare.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        if: needs.prepare.outputs.should_push == 'true'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ matrix.image }}:${{ needs.prepare.outputs.version }}
          format: spdx-json
          output-file: sbom-${{ matrix.image }}.spdx.json

      - name: Upload SBOM
        if: needs.prepare.outputs.should_push == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: sbom-${{ matrix.image }}
          path: sbom-${{ matrix.image }}.spdx.json

  test-images:
    runs-on: ubuntu-latest
    needs: [prepare, build-and-push]
    if: needs.prepare.outputs.should_push == 'true'
    strategy:
      matrix:
        image: ${{ fromJson(needs.prepare.outputs.images) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test image functionality
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ matrix.image }}:${{ needs.prepare.outputs.version }}"
          
          case "${{ matrix.image }}" in
            "backend-base")
              # Test Java runtime and user setup
              docker run --rm $IMAGE_NAME java -version
              docker run --rm $IMAGE_NAME whoami | grep -q nyxis
              docker run --rm $IMAGE_NAME sh -c 'test -d /app'
              ;;
            "cli-base")
              # Test minimal runtime (no shell available in scratch)
              docker run --rm $IMAGE_NAME --help || true
              ;;
            "node-base")
              # Test Java runtime and security tools
              docker run --rm $IMAGE_NAME java -version
              docker run --rm $IMAGE_NAME nmap --version
              docker run --rm $IMAGE_NAME validate-target 192.168.1.1
              ;;
            "devcontainer")
              # Test development tools
              docker run --rm $IMAGE_NAME java -version
              docker run --rm $IMAGE_NAME go version
              docker run --rm $IMAGE_NAME mvn --version
              ;;
          esac

  create-release:
    runs-on: ubuntu-latest
    needs: [prepare, test-images]
    if: startsWith(github.ref, 'refs/tags/v') && needs.prepare.outputs.should_push == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download SBOMs
        uses: actions/download-artifact@v3
        with:
          path: ./sboms

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          name: Release ${{ needs.prepare.outputs.version }}
          body: |
            ## Nyxis Base Images ${{ needs.prepare.outputs.version }}
            
            This release includes the following base images:
            
            - `${{ env.REGISTRY }}/backend-base:${{ needs.prepare.outputs.version }}` - Production Spring Boot backend runtime
            - `${{ env.REGISTRY }}/cli-base:${{ needs.prepare.outputs.version }}` - Minimal Go CLI runtime
            - `${{ env.REGISTRY }}/node-base:${{ needs.prepare.outputs.version }}` - Hardened security tools runtime
            - `${{ env.REGISTRY }}/devcontainer:${{ needs.prepare.outputs.version }}` - Comprehensive development environment
            
            All images are built for `linux/amd64` and `linux/arm64` platforms.
            
            ### Security
            - All images have been scanned for vulnerabilities
            - SBOMs (Software Bill of Materials) are attached to this release
            - Images are signed and include build provenance
            
            ### Usage
            ```bash
            docker pull ${{ env.REGISTRY }}/backend-base:${{ needs.prepare.outputs.version }}
            docker pull ${{ env.REGISTRY }}/cli-base:${{ needs.prepare.outputs.version }}
            docker pull ${{ env.REGISTRY }}/node-base:${{ needs.prepare.outputs.version }}
            docker pull ${{ env.REGISTRY }}/devcontainer:${{ needs.prepare.outputs.version }}
            ```
          files: |
            sboms/**/*.spdx.json
          draft: false
          prerelease: ${{ contains(needs.prepare.outputs.version, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}